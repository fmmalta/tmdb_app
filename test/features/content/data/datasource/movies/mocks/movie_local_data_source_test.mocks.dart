// Mocks generated by Mockito 5.4.2 from annotations
// in movie_app/test/features/content/data/datasource/movies/movie_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_app/features/content/data/datasources/movies/movie_local_data_source.dart'
    as _i2;
import 'package:movie_app/features/content/domain/entities/movie_entity.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends _i1.Mock
    implements _i2.MovieLocalDataSource {
  @override
  _i3.Future<bool> storeMovies(List<_i4.MovieEntity>? movies) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeMovies,
          [movies],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  List<_i4.MovieEntity> getLocalMovies() => (super.noSuchMethod(
        Invocation.method(
          #getLocalMovies,
          [],
        ),
        returnValue: <_i4.MovieEntity>[],
        returnValueForMissingStub: <_i4.MovieEntity>[],
      ) as List<_i4.MovieEntity>);
}
