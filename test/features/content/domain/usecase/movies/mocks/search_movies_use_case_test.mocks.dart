// Mocks generated by Mockito 5.4.2 from annotations
// in movie_app/test/features/content/domain/usecase/movies/search_movies_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_app/core/failure.dart' as _i5;
import 'package:movie_app/features/content/domain/entities/movie_entity.dart'
    as _i6;
import 'package:movie_app/features/content/domain/repositories/movies/movies_remote_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesRemoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesRemoteRepository extends _i1.Mock
    implements _i3.MoviesRemoteRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>> getMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.MovieEntity>>(
          this,
          Invocation.method(
            #getMovies,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.MovieEntity>>(
          this,
          Invocation.method(
            #getMovies,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [query],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.MovieEntity>>(
          this,
          Invocation.method(
            #searchMovies,
            [query],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.MovieEntity>>(
          this,
          Invocation.method(
            #searchMovies,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>>);
}
